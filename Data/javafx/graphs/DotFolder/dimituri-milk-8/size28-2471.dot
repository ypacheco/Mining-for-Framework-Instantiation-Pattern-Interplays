digraph {
baseInfo[graphId=2471,category="extension_graph",isAnonymous=false,possibleRelation=true]
frameworkRelatedTypesInfo[0="javafx.beans.value.ObservableValue"]
possibleCollaborationsInfo[0="2471~CLIENT_METHOD_DECLARATION-INSTANTIATION-CLIENT_METHOD_DECLARATION-INSTANTIATION-CLIENT_METHOD_DECLARATION-INSTANTIATION-~javafx.beans.value.ObservableValue ~javafx.beans.value.ObservableValueBase javafx.beans.value.ObservableValue javafx.beans.value.ObservableValue javafx.beans.value.ObservableValue ~false~false",1="2471~CLIENT_METHOD_DECLARATION-RETURN_TYPE-CLIENT_METHOD_DECLARATION-RETURN_TYPE-CLIENT_METHOD_DECLARATION-RETURN_TYPE-CLIENT_METHOD_DECLARATION-RETURN_TYPE-CLIENT_METHOD_DECLARATION-RETURN_TYPE-CLIENT_METHOD_DECLARATION-RETURN_TYPE-CLIENT_METHOD_DECLARATION-RETURN_TYPE-CLIENT_METHOD_DECLARATION-RETURN_TYPE-CLIENT_METHOD_DECLARATION-RETURN_TYPE-CLIENT_METHOD_DECLARATION-RETURN_TYPE-~javafx.beans.value.ObservableValue ~javafx.beans.value.ObservableValueBase javafx.beans.value.ObservableValue javafx.beans.value.ObservableValue javafx.beans.value.ObservableValue ~false~false"]
locationInfo[projectName="dimituri-milk",filePath="/dimituri-milk/milk-master/milk-core/src/main/java/lv/dimituri/milk/core/Folds.java",contextSignature="Folds",graphId="2471"]
0[label="main.java.lv.dimituri.milk.core.Folds",vertexType="ROOT_CLIENT_CLASS_DECLARATION",isFrameworkType=false,color=red]
1[label="javafx.beans.value.ObservableValue",vertexType="FRAMEWORK_INTERFACE_TYPE",isFrameworkType=true,peripheries=2]
2[label="main.java.lv.dimituri.milk.core.Signal fold(javafx.beans.value.ObservableValue,java.lang.Object,java.util.function.BiFunction)",vertexType="CLIENT_METHOD_DECLARATION",isFrameworkType=false,shape=box]
3[label="main.java.lv.dimituri.milk.core.Signal",vertexType="REFERENCE_CLIENT_CLASS_DECLARATION",isFrameworkType=false,color=blue]
4[label="javafx.beans.value.ObservableValueBase",vertexType="FRAMEWORK_CLASS_TYPE",isFrameworkType=true,peripheries=2]
8[label="observable",vertexType="PARAMETER_DECLARATION",isFrameworkType=true,peripheries=2]
11[label="VAR0",vertexType="VARIABLE_EXPRESION",isFrameworkType=false,shape=circle]
12[label="main.java.lv.dimituri.milk.core.AtomicSignal",vertexType="REFERENCE_CLIENT_CLASS_DECLARATION",isFrameworkType=false,color=blue]
10[label="new AtomicSignal()",vertexType="CONSTRUCTOR_CALL",isFrameworkType=false]
17[label="main.java.lv.dimituri.milk.core.Signal fold(javafx.beans.value.ObservableValue,java.util.function.BinaryOperator)",vertexType="CLIENT_METHOD_DECLARATION",isFrameworkType=false,shape=box]
19[label="observable",vertexType="PARAMETER_DECLARATION",isFrameworkType=true,peripheries=2]
22[label="getValue()",vertexType="INSIDE_CALL",isFrameworkType=true,peripheries=2,shape=box]
24[label="VAR2",vertexType="VARIABLE_EXPRESION",isFrameworkType=false,shape=circle]
23[label="new AtomicSignal()",vertexType="CONSTRUCTOR_CALL",isFrameworkType=false]
26[label="main.java.lv.dimituri.milk.core.Signal foldCurrent(javafx.beans.value.ObservableValue,java.util.function.Function,java.util.function.BiFunction)",vertexType="CLIENT_METHOD_DECLARATION",isFrameworkType=false,shape=box]
28[label="observable",vertexType="PARAMETER_DECLARATION",isFrameworkType=true,peripheries=2]
31[label="getValue()",vertexType="INSIDE_CALL",isFrameworkType=true,peripheries=2,shape=box]
33[label="VAR4",vertexType="VARIABLE_EXPRESION",isFrameworkType=false,shape=circle]
32[label="new AtomicSignal()",vertexType="CONSTRUCTOR_CALL",isFrameworkType=false]
35[label="main.java.lv.dimituri.milk.core.Signal count(javafx.beans.value.ObservableValue)",vertexType="CLIENT_METHOD_DECLARATION",isFrameworkType=false,shape=box]
37[label="observable",vertexType="PARAMETER_DECLARATION",isFrameworkType=true,peripheries=2]
39[label="main.java.lv.dimituri.milk.core.Signal countIf(javafx.beans.value.ObservableValue,java.util.function.Predicate)",vertexType="CLIENT_METHOD_DECLARATION",isFrameworkType=false,shape=box]
41[label="observable",vertexType="PARAMETER_DECLARATION",isFrameworkType=true,peripheries=2]
43[label="main.java.lv.dimituri.milk.core.Signal fold(java.lang.Object,java.util.function.BiFunction)",vertexType="CLIENT_METHOD_DECLARATION",isFrameworkType=false,shape=box]
45[label="main.java.lv.dimituri.milk.core.Signal fold(java.util.function.BinaryOperator)",vertexType="CLIENT_METHOD_DECLARATION",isFrameworkType=false,shape=box]
47[label="main.java.lv.dimituri.milk.core.Signal foldCurrent(java.util.function.Function,java.util.function.BiFunction)",vertexType="CLIENT_METHOD_DECLARATION",isFrameworkType=false,shape=box]
49[label="main.java.lv.dimituri.milk.core.Signal count()",vertexType="CLIENT_METHOD_DECLARATION",isFrameworkType=false,shape=box]
51[label="main.java.lv.dimituri.milk.core.Signal countIf(java.util.function.Predicate)",vertexType="CLIENT_METHOD_DECLARATION",isFrameworkType=false,shape=box]
0->1[label="IMPLEMENT",color=red]
0->2[label="DECLARE_METHOD"]
3->4[label="EXTEND",color=blue]
3->1[label="IMPLEMENT",color=blue]
3->1[label="IMPLEMENT",color=blue]
3->1[label="IMPLEMENT",color=blue]
2->3[label="RETURN"]
8->1[label="OF_TYPE"]
2->8[label="PARAMETER"]
2->11[label="INSTANTIATE"]
12->4[label="EXTEND",color=blue]
12->1[label="IMPLEMENT",color=blue]
12->1[label="IMPLEMENT",color=blue]
12->1[label="IMPLEMENT",color=blue]
11->12[label="OF_TYPE"]
11->10[label="CALL"]
0->17[label="DECLARE_METHOD"]
17->3[label="RETURN"]
19->1[label="OF_TYPE"]
17->19[label="PARAMETER"]
19->22[label="CALL"]
17->24[label="INSTANTIATE"]
24->12[label="OF_TYPE"]
24->23[label="CALL"]
0->26[label="DECLARE_METHOD"]
26->3[label="RETURN"]
28->1[label="OF_TYPE"]
26->28[label="PARAMETER"]
28->31[label="CALL"]
26->33[label="INSTANTIATE"]
33->12[label="OF_TYPE"]
33->32[label="CALL"]
0->35[label="DECLARE_METHOD"]
35->3[label="RETURN"]
37->1[label="OF_TYPE"]
35->37[label="PARAMETER"]
0->39[label="DECLARE_METHOD"]
39->3[label="RETURN"]
41->1[label="OF_TYPE"]
39->41[label="PARAMETER"]
0->43[label="DECLARE_METHOD"]
43->3[label="RETURN"]
0->45[label="DECLARE_METHOD"]
45->3[label="RETURN"]
0->47[label="DECLARE_METHOD"]
47->3[label="RETURN"]
0->49[label="DECLARE_METHOD"]
49->3[label="RETURN"]
0->51[label="DECLARE_METHOD"]
51->3[label="RETURN"]
}
