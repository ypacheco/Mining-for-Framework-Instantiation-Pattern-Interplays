digraph {
baseInfo[graphId=4626,category="pattern",isAnonymous=false,possibleRelation=true]
frameworkRelatedTypesInfo[0="javafx.application.Application"]
possibleCollaborationsInfo[0="4626~INSTANTIATION-OVERRIDING_METHOD_DECLARATION-~javafx.application.Application ~javafx.event.EventHandler ~false~true"]
patternInfo[frequency=2.0,patternRootClient=0]
patternInstancesInfo[0="miamidade-spook-detector~/miamidade-spook-detector/spook-detector-master/src/gov/miamidade/mediaviewer/MediaPlayerApp.java~MediaPlayerApp~3624",1="miamidade-spook-detector~/miamidade-spook-detector/spook-detector-master/src/gov/miamidade/mediaviewer/MotionDetectingMediaPlayerApp.java~MotionDetectingMediaPlayerApp~3626"]
13[label="javafx.beans.value.ObservableObjectValue",vertexType="FRAMEWORK_INTERFACE_TYPE",isFrameworkType=false]
11[label="VAR:javafx.beans.value.ObservableObjectValue",vertexType="VARIABLE_EXPRESION",isFrameworkType=false,shape=circle]
5[label="void start(javafx.stage.Stage)",vertexType="OVERRIDING_METHOD_DECLARATION",isFrameworkType=false,shape=box]
14[label="VAR:javafx.stage.Window",vertexType="VARIABLE_EXPRESION",isFrameworkType=false,shape=circle]
0[label="CLIENT",vertexType="ROOT_CLIENT_CLASS_DECLARATION",isFrameworkType=false,color=red]
6[label="PARAMETER:javafx.stage.Stage",vertexType="PARAMETER_DECLARATION",isFrameworkType=false]
18[label="VAR:ANONYMOUS",vertexType="VARIABLE_EXPRESION",isFrameworkType=false,shape=circle]
19[label="ANONYMOUS",vertexType="REFERENCE_ANONYMOUS_DECLARATION",isFrameworkType=false,color=blue]
17[label="new EventHandler()",vertexType="CONSTRUCTOR_CALL",isFrameworkType=false]
2[label="FIELD:CLIENT",vertexType="FIELD_DECLARATION",isFrameworkType=false,shape=circle]
7[label="javafx.stage.Stage",vertexType="FRAMEWORK_CLASS_TYPE",isFrameworkType=false]
35[label="show()",vertexType="INSIDE_CALL",isFrameworkType=false,shape=box]
1[label="javafx.application.Application",vertexType="FRAMEWORK_CLASS_TYPE",isFrameworkType=false]
8[label="VAR:javafx.scene.Scene",vertexType="VARIABLE_EXPRESION",isFrameworkType=false,shape=circle]
20[label="javafx.event.EventHandler",vertexType="FRAMEWORK_INTERFACE_TYPE",isFrameworkType=false]
40[label="void stop()",vertexType="OVERRIDING_METHOD_DECLARATION",isFrameworkType=false,shape=box]
31[label="setFullScreen()",vertexType="INSIDE_CALL",isFrameworkType=false,shape=box]
39[label="setFullScreen()",vertexType="INSIDE_CALL",isFrameworkType=false,shape=box]
16[label="javafx.stage.Window",vertexType="FRAMEWORK_CLASS_TYPE",isFrameworkType=false]
15[label="sceneProperty()",vertexType="INSIDE_CALL",isFrameworkType=false,shape=box]
44[label="METHOD_DECLARATION",vertexType="CLIENT_METHOD_DECLARATION",isFrameworkType=false,shape=box]
49[label="VAR:CLIENT",vertexType="VARIABLE_EXPRESION",isFrameworkType=false,shape=circle]
10[label="javafx.scene.Scene",vertexType="FRAMEWORK_CLASS_TYPE",isFrameworkType=false]
9[label="addEventHandler()",vertexType="INSIDE_CALL",isFrameworkType=false,shape=box]
27[label="setTitle()",vertexType="INSIDE_CALL",isFrameworkType=false,shape=box]
12[label="get()",vertexType="INSIDE_CALL",isFrameworkType=false,shape=box]
21[label="VAR:javafx.scene.input.KeyEvent",vertexType="VARIABLE_EXPRESION",isFrameworkType=false,shape=circle]
22[label="getCode()",vertexType="INSIDE_CALL",isFrameworkType=false,shape=box]
23[label="javafx.scene.input.KeyEvent",vertexType="FRAMEWORK_CLASS_TYPE",isFrameworkType=false]
5->11[label="INSTANTIATE"]
0->5[label="OVERRIDE"]
5->21[label="INSTANTIATE"]
0->40[label="OVERRIDE"]
0->44[label="DECLARE_METHOD"]
21->23[label="OF_TYPE"]
8->9[label="CALL"]
21->22[label="CALL"]
18->17[label="CALL"]
6->7[label="OF_TYPE"]
5->18[label="INSTANTIATE"]
5->8[label="INSTANTIATE"]
6->39[label="CALL"]
14->15[label="CALL"]
5->6[label="PARAMETER"]
44->49[label="INSTANTIATE"]
6->31[label="CALL"]
6->35[label="CALL"]
18->19[label="OF_TYPE"]
8->10[label="OF_TYPE"]
14->16[label="OF_TYPE"]
11->13[label="OF_TYPE"]
6->27[label="CALL"]
0->2[label="DECLARE_FIELD"]
19->20[label="IMPLEMENT",color=blue]
5->14[label="INSTANTIATE"]
0->1[label="EXTEND",color=red]
11->12[label="CALL"]
}
