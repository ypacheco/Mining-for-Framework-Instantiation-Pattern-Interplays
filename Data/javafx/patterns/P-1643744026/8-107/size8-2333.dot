digraph {
baseInfo[graphId=2333,category="pattern",isAnonymous=false,possibleRelation=true]
frameworkRelatedTypesInfo[0="javafx.concurrent.Service"]
possibleCollaborationsInfo[0="2333~INSTANTIATION-OVERRIDING_METHOD_DECLARATION-~javafx.concurrent.Service ~javafx.concurrent.Task ~false~true"]
patternInfo[frequency=2.0,patternRootClient=0]
patternInstancesInfo[0="stepanovdg-VisualJadeMotionModel~/stepanovdg-VisualJadeMotionModel/VisualJadeMotionModel-master/src/by/bsu/kurs/stepanov/visualisation/AtomicTimelineService.java~AtomicTimelineService~4268",1="hock323-eventManager~/hock323-eventManager/EventManager-master/src/eventManager/model/pokerTournament/LevelTimeService.java~LevelTimeService~3053"]
1[label="javafx.concurrent.Service",vertexType="FRAMEWORK_CLASS_TYPE",isFrameworkType=false]
0[label="CLIENT",vertexType="ROOT_CLIENT_CLASS_DECLARATION",isFrameworkType=false,color=red]
4[label="javafx.concurrent.Task createTask()",vertexType="OVERRIDING_METHOD_DECLARATION",isFrameworkType=false,shape=box]
7[label="VAR:ANONYMOUS",vertexType="VARIABLE_EXPRESION",isFrameworkType=false,shape=circle]
8[label="ANONYMOUS",vertexType="REFERENCE_ANONYMOUS_DECLARATION",isFrameworkType=false,color=blue]
10[label="VAR:javafx.concurrent.Task",vertexType="VARIABLE_EXPRESION",isFrameworkType=false,shape=circle]
5[label="javafx.concurrent.Task",vertexType="FRAMEWORK_CLASS_TYPE",isFrameworkType=false]
6[label="new Task()",vertexType="CONSTRUCTOR_CALL",isFrameworkType=false]
7->8[label="OF_TYPE"]
8->5[label="EXTEND",color=blue]
10->5[label="OF_TYPE"]
0->1[label="EXTEND",color=red]
4->5[label="RETURN"]
4->10[label="INSTANTIATE"]
4->7[label="INSTANTIATE"]
0->4[label="OVERRIDE"]
7->6[label="CALL"]
}
