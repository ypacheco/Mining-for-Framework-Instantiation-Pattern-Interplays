digraph {
baseInfo[graphId=4380,category="pattern",isAnonymous=true,possibleRelation=false]
frameworkRelatedTypesInfo[0="javafx.concurrent.Task"]
possibleCollaborationsInfo[]
patternInfo[frequency=2.0,patternRootClient=0]
patternInstancesInfo[0="NukeName-MazeFramework~/NukeName-MazeFramework/MazeFramework-master/MazeFramework/src/mazeframework/MazeFramework.java~void execute()~1031",1="NukeName-MazeFramework~/NukeName-MazeFramework/MazeFramework-master/MazeFramework/src/mazeframework/MazeFramework.java~void benchmark()~1034"]
4[label="java.util.List call()",vertexType="OVERRIDING_METHOD_DECLARATION",isFrameworkType=false,shape=box]
0[label="ANONYMOUS",vertexType="ROOT_ANONYMOUS_DECLARATION",isFrameworkType=false,color=red]
5[label="VAR:javafx.scene.control.CheckMenuItem",vertexType="VARIABLE_EXPRESION",isFrameworkType=false,shape=circle]
6[label="isSelected()",vertexType="INSIDE_CALL",isFrameworkType=false,shape=box]
1[label="javafx.concurrent.Task",vertexType="FRAMEWORK_CLASS_TYPE",isFrameworkType=false]
2[label="VAR",vertexType="OUTSIDE_VARIABLE_EXPRESION",isFrameworkType=false]
7[label="javafx.scene.control.CheckMenuItem",vertexType="FRAMEWORK_CLASS_TYPE",isFrameworkType=false]
5->6[label="CALL"]
0->4[label="OVERRIDE"]
0->2[label="ASSIGMENT"]
4->5[label="INSTANTIATE"]
5->7[label="OF_TYPE"]
0->1[label="EXTEND",color=red]
2->1[label="OF_TYPE"]
}
